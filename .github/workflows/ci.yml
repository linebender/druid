on:
  push:
    branches:
      - master
  pull_request:

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    name: cargo fmt
    steps:
      - uses: actions/checkout@v2

      - name: install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true

      - name: install rustfmt
        run: rustup component add rustfmt

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  test-stable:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-latest]
    name: cargo clippy+test
    steps:
      - uses: actions/checkout@v2

      - name: install cairo
        run: brew install cairo
        if: contains(matrix.os, 'mac')

      - name: install libgtk-3-dev libx11-dev
        run: |
          sudo apt update
          sudo apt install libgtk-3-dev libx11-dev
        if: contains(matrix.os, 'ubuntu')

      - name: install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          profile: minimal
          override: true

      # Clippy packages in deeper-to-higher dependency order
      - name: cargo clippy druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid-shell/Cargo.toml --all-targets -- -D warnings

      - name: cargo clippy druid
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid/Cargo.toml --all-targets --features=svg,image,im -- -D warnings

      - name: cargo clippy druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid-derive/Cargo.toml --all-targets -- -D warnings

      - name: cargo clippy book examples
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=docs/book_examples/Cargo.toml --all-targets -- -D warnings

      # Test packages in deeper-to-higher dependency order
      - name: cargo test druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml

      - name: cargo test druid
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --features=svg,image,im

      - name: cargo test druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-derive/Cargo.toml

      - name: cargo test book examples
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=docs/book_examples/Cargo.toml

      # After default features are done, also perform X11 clippy+testing on Linux.
      # This is better than a separate job because common dependencies are already built.
      - name: cargo clippy druid-shell (X11)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid-shell/Cargo.toml --all-targets --features=x11 -- -D warnings
        if: contains(matrix.os, 'ubuntu')

      - name: cargo clippy druid (X11)
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid/Cargo.toml --all-targets --features=x11 -- -D warnings
        if: contains(matrix.os, 'ubuntu')

      - name: cargo test druid-shell (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml --features=x11
        if: contains(matrix.os, 'ubuntu')

      - name: cargo test druid (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --features=x11
        if: contains(matrix.os, 'ubuntu')

  test-stable-wasm:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-latest]

    name: cargo clippy+test (wasm32)
    steps:
      - uses: actions/checkout@v2

      # libgtk-dev seems to be needed by e.g. druid-derive
      - name: install libgtk-dev
        run: |
          sudo apt update
          sudo apt install libgtk-3-dev
        if: contains(matrix.os, 'ubuntu')

      - name: install wasm-pack
        run: cargo install wasm-pack

      - name: install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: clippy
          profile: minimal
          override: true

      # Clippy wasm32 relevant packages in deeper-to-higher dependency order
      - name: cargo clippy druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid-shell/Cargo.toml --all-targets --target wasm32-unknown-unknown -- -D warnings

      - name: cargo clippy druid
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          # TODO: Add svg feature when it's no longer broken with wasm
          args: --manifest-path=druid/Cargo.toml --all-targets --features=image,im --target wasm32-unknown-unknown -- -D warnings

      - name: cargo clippy druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid-derive/Cargo.toml --all-targets --target wasm32-unknown-unknown -- -D warnings

      - name: cargo clippy book examples
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=docs/book_examples/Cargo.toml --all-targets --target wasm32-unknown-unknown -- -D warnings

      # Test wasm32 relevant packages in deeper-to-higher dependency order
      # TODO: Find a way to make tests work. Until then the tests are merely compiled.
      - name: cargo test compile druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml --no-run --target wasm32-unknown-unknown

      - name: cargo test compile druid
        uses: actions-rs/cargo@v1
        with:
          command: test
          # TODO: Add svg feature when it's no longer broken with wasm
          args: --manifest-path=druid/Cargo.toml --features=image,im --no-run --target wasm32-unknown-unknown

      - name: cargo test compile druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-derive/Cargo.toml --no-run --target wasm32-unknown-unknown

      - name: cargo test compile book examples
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=docs/book_examples/Cargo.toml --no-run --target wasm32-unknown-unknown

      # Clippy and build the special druid-wasm-examples package.
      - name: cargo clippy druid-wasm-examples
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=druid/examples/wasm/Cargo.toml --target wasm32-unknown-unknown -- -D warnings

      - name: wasm-pack build examples
        run: wasm-pack build --dev --target web druid/examples/wasm

  test-nightly:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-latest]
    name: cargo test nightly
    steps:
      - uses: actions/checkout@v2

      - name: install cairo
        run: brew install cairo
        if: contains(matrix.os, 'mac')

      - name: install libgtk-dev libx11-dev
        run: |
          sudo apt update
          sudo apt install libgtk-3-dev libx11-dev
        if: contains(matrix.os, 'ubuntu')

      - name: install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      # Test packages in deeper-to-higher dependency order
      - name: cargo test druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml

      - name: cargo test druid
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --features=svg,image,im

      - name: cargo test druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-derive/Cargo.toml

      - name: cargo test book examples
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=docs/book_examples/Cargo.toml

      # After default features are done, also perform X11 testing on Linux.
      # This is better than a separate job because common dependencies are already built.
      - name: cargo test druid-shell (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid-shell/Cargo.toml --features=x11
        if: contains(matrix.os, 'ubuntu')

      - name: cargo test druid (X11)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=druid/Cargo.toml --features=x11
        if: contains(matrix.os, 'ubuntu')

  check-docs:
    name: Docs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2

      - name: install cairo
        run: brew install cairo
        if: contains(matrix.os, 'mac')

      - name: install libgtk-dev
        run: |
          sudo apt update
          sudo apt install libgtk-3-dev
        if: contains(matrix.os, 'ubuntu')

      - name: install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      # Doc packages in deeper-to-higher dependency order
      - name: cargo doc druid-shell
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path=druid-shell/Cargo.toml --document-private-items

      - name: cargo doc druid
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path=druid/Cargo.toml --features=svg,image,im --document-private-items

      - name: cargo doc druid-derive
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path=druid-derive/Cargo.toml --document-private-items

      - name: cargo doc book examples
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path=docs/book_examples/Cargo.toml --document-private-items

      # On Linux also attempt docs for X11.
      - name: cargo doc druid-shell (X11)
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path=druid-shell/Cargo.toml --features=x11 --document-private-items
        if: contains(matrix.os, 'ubuntu')

  mdbook-build:
    runs-on: ubuntu-latest
    name: mdbook build
    steps:
      - uses: actions/checkout@v2

      - name: install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: install mdbook
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --vers "^0.3" mdbook

      - name: mdbook build
        run: mdbook build
        working-directory: ./docs
